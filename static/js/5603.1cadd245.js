"use strict";(self["webpackChunkvue_url_arcgis"]=self["webpackChunkvue_url_arcgis"]||[]).push([[5603],{55566:function(e,t,r){r.r(t),r.d(t,{default:function(){return E}});var o=r(63825),i=r(54560),l=r(35680),s=(r(40689),r(27092)),n=r(3266),a=r(24446),y=r(58476),u=r(2553),p=(r(57787),r(35425),r(90202),r(66667)),d=r(92236),c=r(7230),h=r(71563),v=r(49471),S=r(63759),m=r(47359),f=r(61761),g=r(34481),b=r(93692),C=r(15387),_=r(26141),k=r(47941),G=r(89687),w=r(11989),R=r(33540);const Z=["atom","xml"],P={base:_.Z,key:"type",typeMap:{"simple-line":k.Z},errorContext:"symbol"},x={base:_.Z,key:"type",typeMap:{"picture-marker":G.Z,"simple-marker":w.Z},errorContext:"symbol"},j={base:_.Z,key:"type",typeMap:{"simple-fill":R.Z},errorContext:"symbol"};let F=class extends((0,S.h)((0,g.Q)((0,m.q)((0,f.I)((0,b.M)((0,n.R)(v.Z))))))){constructor(...e){super(...e),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{var t;const r=e.layerDefinition.drawingInfo.renderer.symbol;r&&"esriSFS"===r.type&&null!=(t=r.outline)&&t.style.includes("esriSFS")&&(r.outline.style="esriSLSSolid")})),t.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?(0,y.vt)(this.url,Z)||"GeoRSS":e||""}set title(e){this._set("title",e)}load(e){const t=(0,s.pC)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).catch(a.r9).then((()=>this._fetchService(t))).then((e=>{this.read(e,{origin:"service"})}))),Promise.resolve(this)}async hasDataChanged(){const e=await this._fetchService();return this.read(e,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(e){var t;const r=this.spatialReference,{data:o}=await(0,l["default"])(i.Z.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:(0,h.oR)(r)?void 0:null!=(t=r.wkid)?t:JSON.stringify(r)},signal:e});return o}_hasGeometry(e){var t,r;return null!=(t=null==(r=this.featureCollections)?void 0:r.some((t=>{var r,o;return(null==(r=t.featureSet)?void 0:r.geometryType)===e&&(null==(o=t.featureSet.features)?void 0:o.length)>0})))&&t}};(0,o._)([(0,u.Cb)()],F.prototype,"description",void 0),(0,o._)([(0,u.Cb)()],F.prototype,"featureCollections",void 0),(0,o._)([(0,p.r)("service","featureCollections",["featureCollection.layers"])],F.prototype,"readFeatureCollections",null),(0,o._)([(0,u.Cb)({type:c.Z,json:{name:"lookAtExtent"}})],F.prototype,"fullExtent",void 0),(0,o._)([(0,u.Cb)(C.id)],F.prototype,"id",void 0),(0,o._)([(0,u.Cb)(C.rn)],F.prototype,"legendEnabled",void 0),(0,o._)([(0,u.Cb)({types:P,json:{write:!0}})],F.prototype,"lineSymbol",void 0),(0,o._)([(0,u.Cb)({type:["show","hide"]})],F.prototype,"listMode",void 0),(0,o._)([(0,u.Cb)({types:x,json:{write:!0}})],F.prototype,"pointSymbol",void 0),(0,o._)([(0,u.Cb)({types:j,json:{write:!0}})],F.prototype,"polygonSymbol",void 0),(0,o._)([(0,u.Cb)({type:["GeoRSS"]})],F.prototype,"operationalLayerType",void 0),(0,o._)([(0,u.Cb)(C.HQ)],F.prototype,"url",void 0),(0,o._)([(0,u.Cb)({json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],F.prototype,"title",null),(0,o._)([(0,u.Cb)({readOnly:!0,json:{read:!1},value:"geo-rss"})],F.prototype,"type",void 0),F=(0,o._)([(0,d.j)("esri.layers.GeoRSSLayer")],F);const E=F}}]);